#!/bin/csh
# -------------------------------------------------------------------------
# File name:  gradeMy_xbasenamex.csh
#
# Template:   My_grader_template_LOCALbin.txt
#
# GENERATED:  Sun Mar 15 18:57:44 EST 2020 
#
# Purpose:    TEMPLATE: Grade CODIO programming assignment for specific student (login).
#
# Invocation: gradeMy_xbasenamex.csh login
#
# Example:    gradeMy_xbasenamex.csh ejones 
#
# Arguments: 
#            (1) studlogin - Unix login of student. 
#
# Author:    Dr. Edward L. Jones
#
# Date:      Fall 2010  
# Revised:   05 Mar 2018 : Codio template.
#            12 May 2018 : Removed login from all source files.
#
#            TBD: Add bonus  (expf + checkrun)
#
#item PTS  Objective / Rubric
#---- ---  ----------------------------------------------------------
#  1  xsubmitPTSx     Submitted                         (xsubmitPTSx).
#  2  xcompilePTSx     Clean compilation                 (xcompilePTSx)
#  3  xdocnPTSx     Quality of documentation          (xdocnPTSx)
#  4  xexecutionPTSx     Correctness of output             (xexecutionPTSx)
#  5  bon     BONUS -- exceptional features     (+0)
#     ---
#      xmaxSCOREx  POINTS
#
#      score = ( bon + score ) / xmaxSCOREx
# -------------------------------------------------------------------------
set compileF = ( $src xcompileFx )

#-| Family members share testcase files.
set basename = xbasenamex
set familyname = xfamilynamex     

set inFile = ( xSOURCESx )
set outFile = ( xSINKSx )

set curyear = xcurYEARx
@ doc = xdocnPTSx
@ cor = xexecutionPTSx
@ bon = 0
set auto_docngrading = YES
set auto_rungrading = YES

set gradingDIR = ~/workspace/grading
#-|---------------------------------------------------------------------------
#-| Verify that grading directory exists and grading files are there.
#-|---------------------------------------------------------------------------
if (-d $gradingDIR/) then
   set count = ( `ls  $gradingDIR/xfamilynamex:*f?* | wc` )
   if ($count[1] < 2) then
      echo "ERROR-2: xbasenamex grading test cases not found. Email TEACHER. "
      exit 2
   endif
else
   echo "ERROR-1: xbasenamex grading area not established. Email TEACHER. "
   exit 1
endif

#-|----------------------------------------------------------------
#-| Personal use: if no login supplied, use stored login.
#-| Otherwise, read and store login in .loginfile.
#-|----------------------------------------------------------------
set stud = $1
set loginFound = 0
if ($#argv == 0) then
   if (-e ~/workspace/.loginfile) then
      set STUDLOGIN = ( `cat ~/workspace/.loginfile` )
      if ( $#STUDLOGIN == 1) then
         @ loginFound = 1
         set stud = $STUDLOGIN[1]
      endif
   endif

   if ($loginFound == 0) then
      echo -n "Enter your login (e.g., ejones, ksmith): ";
      set stud = $<
      rm -f ~/workspace/.loginfile
      echo $stud > ~/workspace/.loginfile
   endif
else  
   rm -f ~/workspace/.loginfile
   echo $stud > ~/workspace/.loginfile
endif

#-| ---------------------------------------------------------------------------
#-| Initialize data for grading report header.
#-| ---------------------------------------------------------------------------
set curdir = `pwd`
set g = "My_xbasenamex.cpp_gradingreport-$stud.txt"

#-| ---------------------------------------------------------------------------
#-| Initialize overall score to the max value.
#-| ---------------------------------------------------------------------------
@ score = xmaxSCOREx

#-| ---------------------------------------------------------------------------
#-| Initialize file names for student's work.
#-| ---------------------------------------------------------------------------
set src = xbasenamex.cpp
set srcFilter = xbasenamex:srcFilter
set run = xbasenamex-$stud.crun
set compileF = ( xcompileFx )

#-|-------------------------------------------------------------------------
#-| Place files needed to compile into list compileF. Verify the each file
#-| exists in student workspace. Attempt to copy each into grading directory 
#-| (a) without student loging, and (b) with student login. Copy (b) into
#-| workspace [facility student making submission].
#-| Finally, move into grading directory.
#-|-------------------------------------------------------------------------
set compileF = ( $src $compileF )

@ compFile_missing = 0
@ n = 1
while ( $n <= $#compileF)

  set f = $compileF[$n]
  set nf = `echo $f | sed "s/\./-$stud./g"`
  if (! -e $f ) then
     echo "WARNING: MISSING compilation file $f "
     @ compFile_missing++
  else
     rm -f grading/$f
     cp $f grading/
     cp $f grading/$nf
     cp $f $nf
  endif

  @ n++
end
cd $gradingDIR/

#-| ---------------------------------------------------------------------------
#-| Verify testcase files needed for grading exist in directory.
#-| ---------------------------------------------------------------------------
if (-e $src) then
   @ first = 1
   @ TCmissing = 0
   foreach n ( xTESTCASESx )
      if (-e xfamilynamex:expf$n ) then
         if (-e xfamilynamex:tcf$n ) then
            echo "TestCase $n found"
         else
            @ TCmissing++
            echo "TestCase $n tcf FILE NOT FOUND"
         endif
      else
         @ TCmissing++
         echo "TestCase $n expf FILE NOT FOUND"
      endif
   end
else
   echo "** BAD ERROR -- SOURCE FILE $src NOT FOUND **"
endif

#-| ---------------------------------------------------------------------------
#-| Write out header for grading report.
#-| ---------------------------------------------------------------------------
if (-e $g) rm $g
echo "-----------------------------------------------------" > $g
date >> $g
echo "-----------------------------------------------------" >> $g
echo "Grading Report for $stud" >> $g
echo "Assignment: xASSIGNx" >> $g
echo "Program:    $src" >> $g
echo " " >> $g
echo "MAX Score = xmaxSCOREx" >> $g
echo "Grading Deductions/Details: " >> $g
echo "-----------------------------------------------------" >> $g
echo " " >> $g

     # -----------------------------------------
P1:  #-| Check: MISSING ASSIGNMENT.
     # -----------------------------------------
echo "-------------------------------------------------------------" >> $g
echo "P1 - Program submission (xsubmitPTSx)"  >> $g
echo "-------------------------------------------------------------" >> $g
if ( $compFile_missing > 0 ) then
   echo -n "     -xmaxSCOREx  -> (Deduction Rationale: "
   echo "Missing one or more compilation file(s): $compileF"
   echo -n "     -xmaxSCOREx  -> (Deduction Rationale: " >> $g
   echo "Missing one or more compilation file(s): $compileF" >> $g
   @ score = $score - xmaxSCOREx
   goto WRITESCORE
else
   echo "     +xsubmitPTSx  -> (Rationale: Assignment submitted)" >> $g
endif


if ( xcompilePTSx == 0) then
   echo "SKIPPING COMPILATION STEP ... "
   repeat 1 echo " " >> $g
   echo "SKIPPING COMPILATION STEP ... " >> $g
   repeat 1 echo " " >> $g
   goto P3 
endif

COMPILE_SetUp:  # ================================= #
                # ================================= #

#-| ---------------------------------------------------------------------
#-| Check that the .cpp, .h and .o files needed to compile the source 
#-| program are in the directory where grading is being performed.
#-|
#-| NOTE: Files are either in the hidden grading directory (from stack),
#-|       or have been copied from student's project into grading directory.
#-| ---------------------------------------------------------------------

set CLEANUP_list = ( )
set includeF = ( xincludeFx )
@ missing = 0
foreach inclf ( $includeF )
  if (! -e $inclf) then
     echo "WARNING: MISSING INCLUDE file $inclf "
     @ missing++
  endif
end

#-|-------------------------------------------------------------------------
#-| Place files needed to compile into list compileF. Verify the each file
#-| exists in student workspace. Attempt to copy each into grading directory 
#-| (a) without student loging, and (b) with student login. Copy (b) into
#-| workspace [facility student making submission].
#-|-------------------------------------------------------------------------
set compileF = ( $src $compileF )

@ n = 1
while ( $n <= $#compileF)

  set f = $compileF[$n]
  set nf = `echo $f | sed "s/\./-$stud./g"` 
  if (! -e ~/workspace/$f ) then
     echo "WARNING: MISSING compilation file $f "
     @ missing++
  else
     rm -f ~/workspace/grading/$f
     cp $f ~/workspace/grading/
     cp $f ~/workspace/grading/$nf
     cp $f ~/workspace/$nf
  endif

  @ n++
end


if ($missing) then
   echo "RE-RUN after placing these files in the current directory ..."
   @ score = 0
   goto WRITESCORE 
endif

echo "COMPILER INPUT FILES: $compileF"
#echo -n "Hit ENTER to CONTINUE: "; set go = $<

     # -----------------------------------------
P2:  #-| Check: FAILURE TO COMPILE.
     # -----------------------------------------

echo "-------------------------------------------------------------" >> $g
echo "P2 - Program compilation (xcompilePTSx)"  >> $g
echo "-------------------------------------------------------------" >> $g

csh ~/workspace/bin/filterSource.csh $src $srcFilter 
set complog = complog-$stud
if (-e $complog) rm -f $complog
g++ $compileF >& $complog
set nocompile = $status
if ($nocompile) then
   echo -n "     -xcompilePTSx -> (Deduction Rationale: DOES NOT COMPILE)" >> $g
   echo " - see compilation log below ..." >> $g
   echo -n "     -xcompilePTSx  -> (Deduction Rationale: DOES NOT COMPILE)"
   echo " - see compilation log below ..." 

   echo "     **************************** " >> $g
   echo "     **************************** " >> $g
   sed 's/^/     /' $complog >> $g 
   echo "     **************************** " >> $g
   echo "     **************************** " >> $g

   @ score = $score - xcompilePTSx 

else
   echo "     +xcompilePTSx  -> (Rationale: Successful compilation)" >> $g
   g++ $compileF -o $run
endif
if (-e $complog) rm -f $complog


     # ---------------------------------------------
P3:  #-| AUTO Check: DOCUMENTATION.
     # ---------------------------------------------

if (xdocnPTSx == 0) then
   echo "SKIPPING DOCUMENTATION CHECK STEP ... "
   repeat 1 echo " " >> $g
   echo "SKIPPING DOCUMENTATION CHECK STEP ... " >> $g
   repeat 1 echo " " >> $g
   goto P4 
endif

@ doc_maxpts = xdocnPTSx

echo "-------------------------------------------------------------" >> $g
echo "P3 - Quality of documentation ($doc_maxpts)" >> $g
echo "-------------------------------------------------------------" >> $g
echo "P3 - Quality of documentation ($doc_maxpts)" 
echo 

csh ~/workspace/bin/CheckDocnC.csh xASSIGNx xbasenamex $stud $doc_maxpts $g
@ docnpts = $status
@ docded = xdocnPTSx - $docnpts
@ score = $score - $docded

#-- end P3

     # -----------------------------------------------------
P4:  #-| Check: EXECUTION output correctness and formatting.
     # -----------------------------------------------------

if (xexecutionPTSx == 0) then
   echo "SKIPPING EXECUTION STEP ... "
   repeat 1 echo " " >> $g
   echo "SKIPPING EXECUTION STEP ... " >> $g
   repeat 1 echo " " >> $g
   goto WRITESCORE  
endif
     
echo "-------------------------------------------------------------" >> $g
echo "P4 - Execution Correctness and Layout (xexecutionPTSx)" >> $g
echo "-------------------------------------------------------------" >> $g
echo "P4 - Execution Correctness and Layout (xexecutionPTSx)" 
echo 
echo "" >> $g

if (! -e $run) then
   echo "      -xexecutionPTSx (xexecutionPTSx)  -> (Deduction Rationale - NO EXECUTABLE PROGRAM FOUND.)"
   echo "      -xexecutionPTSx (xexecutionPTSx)  -> (Deduction Rationale - NO EXECUTABLE PROGRAM FOUND.)" >> $g
   echo ""
   echo "" >> $g
   echo "       EXECUTION score = 0 / xexecutionPTSx" >> $g
   echo "       EXECUTION score = 0 / xexecutionPTSx" 

   @ score = $score - xexecutionPTSx
   goto WRITESCORE
endif

echo "" >> $g

#-| ------------------------------------------------------------------
#-| Automated execution and scoring -- INTERACTIVE program.
#-| ------------------------------------------------------------------

csh ~/workspace/bin/CheckRunC.csh xbasenamex $stud $cor $g $inFile $outFile Codio
@ pts = $status
@ runded = $cor - $pts
@ score = $score - $runded


WRITESCORE:

#-| Print final score.
echo " " >> $g
echo "myxASSIGNx:xbasenamex.cpp $stud SCORE = $score / xmaxSCOREx  " >> $g
echo "myxASSIGNx:xbasenamex.cpp $stud SCORE = $score / xmaxSCOREx  " 
echo " " >> $g
echo "-----------------------------------------------------" >> $g

#-| ---------------------------------------------------------------------------
#-| Copy grading report to back to directory containing source file.
#-| ---------------------------------------------------------------------------
cp $g $curdir/
cd $curdir


goto STOPNOW
curl --retry 3 -s "$CODIO_AUTOGRADE_URL&grade=$score"
STOPNOW:
echo ""
echo "Grader gradeMy_xbasenamex.csh terminating ... "

exit 0

